#include <Adafruit_RGBLCDShield.h>
#include <utility/Adafruit_MCP23017.h>
#include <SPI.h>
#include <RFID.h>
#include <TimeLib.h>

#define TEMPERATURE_CONVERSION_RATE 500/1024 //500mv for 1024 
#define TEMPERATURE_SAMPLE_RATE 1000

#define BACKLIGHT 0x7

#define SDAPIN 9 // RFID Module SDA pin
#define RESETPIN 8 // RFID Module RESET pin

const int sensorTemperature = A0; // analog pin used to measure Temperature
Adafruit_RGBLCDShield lcd = Adafruit_RGBLCDShield();
RFID nfc(SDAPIN, RESETPIN);


unsigned int bookingTime; //time in seconds
bool roomEmpty; // false - occupied , true -  free
time_t timeOnSelect;

void setup() {
  pinMode(sensorTemperature, INPUT);
  Serial.begin(9600);
  lcd.begin(16, 2);
  SPI.begin();
  nfc.init();

  lcd.setBacklight(BACKLIGHT);
  bookingTime = 0;
  roomEmpty = true;





}

void loop() {
  //Serial.print(readTemperature());
  //Serial.print("C");
  //Serial.println("");
  //Serial.println("");


  //writeToDisplay(readTemperature());
  printRoomState();
 if (roomEmpty) {
   readCard();
 }
  delay(1000);







}


float readTemperature() {
  delay(TEMPERATURE_SAMPLE_RATE);
  float tCelsius, voltage;
  voltage = analogRead(sensorTemperature);
  tCelsius = voltage * TEMPERATURE_CONVERSION_RATE;
  return tCelsius;
}

void writeToDisplay(float value) {
  lcd.clear();
  lcd.setCursor(0, 0);

  lcd.print(value);
}

void readCard() {
  if (nfc.isCard())
  {
    /* If so then get its serial number */
    nfc.readCardSerial();
    Serial.println("Card detected:");
    for (int i = 0; i < 5; i++)
    {
      Serial.print(nfc.serNum[i], DEC);
      //Serial.print(RC522.serNum[i],HEX); //to print card detail in Hexa Decimal format
    }
    Serial.println();
    Serial.println();

    setTime();
  }
}


void setTime() {
  byte flagSelect = 1;
  lcd.clear();
  lcd.setCursor(5, 1);
  lcd.print(String(bookingTime / 60) + ":" + String(bookingTime % 60) + "0");
  while (flagSelect) {
    uint8_t buttons = lcd.readButtons();
    if (buttons) {
      if (buttons & BUTTON_UP) {
        delay(300);
        bookingTime = bookingTime + 15 * 60; //add 15 minutes

      }
      if (buttons & BUTTON_DOWN) {
        if (bookingTime != 0) {
          delay(300);
          bookingTime = bookingTime - 15 * 60; //subtract 15 minutes

        }
      }
      if (buttons & BUTTON_SELECT) {
        delay(300);
        flagSelect = 0;
        roomEmpty = false;
        timeOnSelect = now();

      }
      lcd.clear();
      lcd.setCursor(5, 1);
      lcd.print(String(bookingTime / 60) + ":" + String(bookingTime % 60) + "0");
    }
  }
  // function call to  server
}



void printRoomState() {
  if (roomEmpty) {
    lcd.clear();
    lcd.setCursor(5, 0);
    lcd.print("Free");
  } else {
    lcd.clear();
    lcd.setCursor(3, 0);
    lcd.print("Occupied");
    lcd.setCursor(5, 1);
    lcd.print(String(bookingTime / 60) + ":" + String(bookingTime % 60));
    time_t currentTime = now();
    if (bookingTime > 0 ) {
      bookingTime = bookingTime - (currentTime - timeOnSelect);
      timeOnSelect = currentTime;
    } else {
      roomEmpty = true;
      bookingTime = 0;
    }
  }
}


